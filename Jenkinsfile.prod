// Jenkinsfile.prod

pipeline {
  agent any

  environment {
    CLOUD_PROVIDER        = "${env.CLOUD_PROVIDER ?: 'oci'}"
    SSH_KEY_PATH          = '/var/jenkins_home/.ssh/id_rsa'
    ANSIBLE_REMOTE_USER   = 'devops'
    VENV_ACTIVATE         = '/home/jenkins/venv/bin/ansible-playbook'
    OCIR_REPO             = 'iad.ocir.io/idtijq8cx4jl/my-portfolio-site'
  }

  options {
    timestamps()
    ansiColor('xterm')
  }

  stages {
    stage('Checkout Source') {
      steps {
        checkout scm
      }
    }

    stage('Init Environment') {
      steps {
        script {
          echo "üß≠ Using CLOUD_PROVIDER=${env.CLOUD_PROVIDER}"

          def cloudVars = [
            oci: [
              ANSIBLE_INVENTORY:    'ansible/inventory/oci.ini',
              ANSIBLE_TARGET_HOST:  'oci.prod.pauloazedo.dev',
              PROD_APP_URL:         'https://oci.prod.pauloazedo.dev',
              BLUE_APP_URL:         'https://oci.blue.pauloazedo.dev'
            ],
            aws: [
              ANSIBLE_INVENTORY:    'ansible/inventory/aws.ini',
              ANSIBLE_TARGET_HOST:  'aws.prod.pauloazedo.dev',
              PROD_APP_URL:         'https://aws.prod.pauloazedo.dev',
              BLUE_APP_URL:         'https://aws.blue.pauloazedo.dev'
            ],
            azure: [
              ANSIBLE_INVENTORY:    'ansible/inventory/azure.ini',
              ANSIBLE_TARGET_HOST:  'azure.prod.pauloazedo.dev',
              PROD_APP_URL:         'https://azure.prod.pauloazedo.dev',
              BLUE_APP_URL:         'https://azure.blue.pauloazedo.dev'
            ],
            gcp: [
              ANSIBLE_INVENTORY:    'ansible/inventory/gcp.ini',
              ANSIBLE_TARGET_HOST:  'gcp.prod.pauloazedo.dev',
              PROD_APP_URL:         'https://gcp.prod.pauloazedo.dev',
              BLUE_APP_URL:         'https://gcp.blue.pauloazedo.dev'
            ]
          ]

          def selected = cloudVars[env.CLOUD_PROVIDER]
          if (!selected) {
            error "‚ùå Unknown CLOUD_PROVIDER: '${env.CLOUD_PROVIDER}'"
          }

          env.ANSIBLE_INVENTORY   = selected.ANSIBLE_INVENTORY
          env.ANSIBLE_TARGET_HOST = selected.ANSIBLE_TARGET_HOST
          env.PROD_APP_URL        = selected.PROD_APP_URL
          env.BLUE_APP_URL        = selected.BLUE_APP_URL
        }
      }
    }

    stage('Discover Latest Tag from OCIR') {
      steps {
        withCredentials([usernamePassword(
          credentialsId: 'ocir-creds',
          usernameVariable: 'OCIR_USERNAME',
          passwordVariable: 'OCIR_PASSWORD'
        )]) {
          script {
            def latestTag = sh(
              script: """
                skopeo list-tags --creds "$OCIR_USERNAME:$OCIR_PASSWORD" docker://$OCIR_REPO |
                jq -r '.Tags[]' | sort -V | tail -n1
              """,
              returnStdout: true
            ).trim()

            if (!latestTag) {
              error "‚ùå No tags found in OCIR repo: ${env.OCIR_REPO}"
            }

            echo "‚úÖ Latest OCIR tag: ${latestTag}"
            env.LATEST_PROD_TAG = latestTag
          }
        }
      }
    }

    stage('Deploy Latest Tag to BLUE Container') {
      steps {
        withCredentials([file(credentialsId: 'ansible-vault-passfile', variable: 'VAULT_PASS_FILE')]) {
          sh '''
            set -e
            export ANSIBLE_SSH_ARGS="-i ${SSH_KEY_PATH} -o StrictHostKeyChecking=accept-new"
            export ANSIBLE_REMOTE_USER=${ANSIBLE_REMOTE_USER}

            ${VENV_ACTIVATE} -i ${ANSIBLE_INVENTORY} ansible/prod.yml \
              --limit prod \
              --tags "prod_site,fallback" \
              --extra-vars "prod_site_target=blue latest_prod_site_tag=${LATEST_PROD_TAG}" \
              --vault-password-file "${VAULT_PASS_FILE}"
          '''
        }

        script {
          slackSend (
            channel: '#jenkins_notifications',
            color: '#439FE0',
            message: """üîµ *Deployed to BLUE container*
‚Ä¢ Version: *${env.LATEST_PROD_TAG}*
‚Ä¢ Environment: *${env.CLOUD_PROVIDER.toUpperCase()}*
‚Ä¢ üîó <${env.BUILD_URL}|View Jenkins Build>
‚Ä¢ üåê <${env.BLUE_APP_URL}|Open Blue App>
‚Ä¢ üîÅ Awaiting manual approval to promote to GREEN..."""
          )
        }
      }
    }

    stage('Await Manual Approval to Promote GREEN') {
      steps {
        timeout(time: 2, unit: 'HOURS') {
          input message: "Promote BLUE container to GREEN?", ok: "Approve"
        }
      }

      post {
        aborted {
          withCredentials([file(credentialsId: 'ansible-vault-passfile', variable: 'VAULT_PASS_FILE')]) {
            script {
              def output = sh(
                script: """
                  set -e
                  export ANSIBLE_SSH_ARGS="-i ${SSH_KEY_PATH} -o StrictHostKeyChecking=accept-new"
                  export ANSIBLE_REMOTE_USER=${ANSIBLE_REMOTE_USER}

                  ${VENV_ACTIVATE} -i ${ANSIBLE_INVENTORY} ansible/prod.yml \
                    --limit prod \
                    --tags get_green_version \
                    --extra-vars "cloud_provider=${env.CLOUD_PROVIDER}" \
                    --vault-password-file "${VAULT_PASS_FILE}" \
                    | tee /tmp/green-version.out
                """,
                returnStatus: false
              )

              def greenVersionOutput = readFile('/tmp/green-version.out')
              def match = greenVersionOutput =~ /"current_green_version":\s*"?(v[\d\.]+)"?/
              def currentVersion = match ? match[0][1] : "unknown"

              slackSend (
                channel: '#jenkins_notifications',
                color: 'warning',
                message: """‚ö†Ô∏è *Approval aborted*
‚Ä¢ Attempted Version: *${env.LATEST_PROD_TAG}*
‚Ä¢ Current GREEN version still running: *${currentVersion}*
‚Ä¢ üîó <${env.BUILD_URL}|View Jenkins Build>"""
              )
            }
          }
        }
      }
    }

    stage('Promote BLUE to GREEN Container') {
      steps {
        withCredentials([file(credentialsId: 'ansible-vault-passfile', variable: 'VAULT_PASS_FILE')]) {
          sh '''
            set -e
            export ANSIBLE_SSH_ARGS="-i ${SSH_KEY_PATH} -o StrictHostKeyChecking=accept-new"
            export ANSIBLE_REMOTE_USER=${ANSIBLE_REMOTE_USER}

            ${VENV_ACTIVATE} -i ${ANSIBLE_INVENTORY} ansible/prod.yml \
              --limit prod \
              --tags "prod_site,fallback" \
              --extra-vars "prod_site_target=green latest_prod_site_tag=${LATEST_PROD_TAG}" \
              --vault-password-file "${VAULT_PASS_FILE}"
          '''
        }

        script {
          slackSend (
            channel: '#jenkins_notifications',
            color: 'good',
            message: """‚úÖ *Promoted to GREEN container*
‚Ä¢ Version: *${env.LATEST_PROD_TAG}*
‚Ä¢ Environment: *${env.CLOUD_PROVIDER.toUpperCase()}*
‚Ä¢ üîó <${env.BUILD_URL}|View Jenkins Build>
‚Ä¢ üåê <${env.PROD_APP_URL}|Open Live App>"""
          )
        }
      }
    }
  }

  post {
    success {
      script {
        slackSend (
          channel: '#jenkins_notifications',
          color: 'good',
          message: """üéâ *PROD Deployment Completed Successfully*
‚Ä¢ Version: *${env.LATEST_PROD_TAG}*
‚Ä¢ Environment: *${env.CLOUD_PROVIDER.toUpperCase()}*
‚Ä¢ üîó <${env.BUILD_URL}|View Jenkins Build>
‚Ä¢ üåê <${env.PROD_APP_URL}|Open Live App>"""
        )
      }
    }

    failure {
      script {
        slackSend (
          channel: '#jenkins_notifications',
          color: 'danger',
          message: """‚ùå *PROD Pipeline FAILED*
‚Ä¢ Environment: *${env.CLOUD_PROVIDER.toUpperCase()}*
‚Ä¢ üîó <${env.BUILD_URL}|View Jenkins Build>"""
        )
      }
    }
  }
}