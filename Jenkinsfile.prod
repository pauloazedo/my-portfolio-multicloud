// Jenkinsfile.prod

// Helper: Slack notification
def sendSlackNotification(String message) {
  withCredentials([string(credentialsId: 'jenkins-slack-token', variable: 'SLACK_WEBHOOK_URL')]) {
    writeFile file: 'slack_payload.json', text: """{ "text": "${message}" }"""
    sh '''
      set -e
      curl -X POST -H "Content-type: application/json" \
        --data @slack_payload.json \
        "$SLACK_WEBHOOK_URL"
    '''
  }
}

pipeline {
  agent any

  environment {
    SSH_KEY_PATH        = '/var/jenkins_home/.ssh/id_rsa'
    ANSIBLE_REMOTE_USER = 'devops'
    CLOUD_PROVIDER      = 'oci'
    ANSIBLE_INVENTORY   = 'ansible/inventory/oci.ini'
    VENV_ACTIVATE       = '/home/jenkins/venv/bin/ansible-playbook'
    OCIR_REPO           = 'iad.ocir.io/idtijq8cx4jl/my-portfolio-site'
  }

  stages {

    stage('Checkout Source') {
      steps {
        checkout scm
      }
    }

    stage('Init Environment') {
      steps {
        echo "üß≠ Using CLOUD_PROVIDER=${env.CLOUD_PROVIDER}"
      }
    }

    stage('Discover Latest Tag from OCIR') {
      steps {
        withCredentials([usernamePassword(
          credentialsId: 'ocir-creds',
          usernameVariable: 'OCIR_USERNAME',
          passwordVariable: 'OCIR_PASSWORD'
        )]) {
          withEnv(["OCIR_AUTH=${env.OCIR_USERNAME}:${env.OCIR_PASSWORD}"]) {
            script {
              def result = sh(script: '''
                skopeo list-tags --creds "$OCIR_AUTH" \
                  docker://iad.ocir.io/idtijq8cx4jl/my-portfolio-site \
                | jq -r .Tags[] \
                | sort -V \
                | tail -n1
              ''', returnStdout: true).trim()

              env.latest_prod_site_tag = result
              env.prod_site_image = "${env.OCIR_REPO}:${result}"
              echo "‚úÖ Latest OCIR tag: ${env.latest_prod_site_tag}"
              echo "üñºÔ∏è Using image: ${env.prod_site_image}"
            }
          }
        }
      }
    }

    stage('Deploy Latest Tag to BLUE Container') {
      steps {
        withCredentials([file(credentialsId: 'ansible-vault-passfile', variable: 'VAULT_PASSFILE')]) {
          sh '''
            set -e
            export ANSIBLE_SSH_ARGS="-i ${SSH_KEY_PATH} -o StrictHostKeyChecking=accept-new"
            export ANSIBLE_REMOTE_USER=${ANSIBLE_REMOTE_USER}

            ${VENV_ACTIVATE} -i ${ANSIBLE_INVENTORY} ansible/prod.yml \
              --tags run_blue,check_images \
              --extra-vars "prod_site_tag=${latest_prod_site_tag} \
                            prod_site_image=${prod_site_image}" \
              --vault-password-file "${VAULT_PASSFILE}"
          '''
        }

        script {
          sendSlackNotification("üöÄ *${env.latest_prod_site_tag}* deployed to *blue container* and is awaiting approval.")
        }
      }
    }

    stage('Await Manual Approval to Promote GREEN') {
      steps {
        timeout(time: 2, unit: 'HOURS') {
          input message: "Promote ${env.latest_prod_site_tag} to green?"
        }
      }
    }

    stage('Promote BLUE to GREEN Container') {
      steps {
        withCredentials([file(credentialsId: 'ansible-vault-passfile', variable: 'VAULT_PASSFILE')]) {
          sh '''
            set -e
            export ANSIBLE_SSH_ARGS="-i ${SSH_KEY_PATH} -o StrictHostKeyChecking=accept-new"
            export ANSIBLE_REMOTE_USER=${ANSIBLE_REMOTE_USER}

            ${VENV_ACTIVATE} -i ${ANSIBLE_INVENTORY} ansible/prod.yml \
              --tags run_green \
              --extra-vars "prod_site_tag=${latest_prod_site_tag} \
                            prod_site_image=${prod_site_image}" \
              --vault-password-file "${VAULT_PASSFILE}"
          '''
        }

        script {
          sendSlackNotification("‚úÖ *${env.latest_prod_site_tag}* promoted to *green container* and is now live.")
        }
      }
    }
  }

  post {
    aborted {
      withCredentials([file(credentialsId: 'ansible-vault-passfile', variable: 'VAULT_PASSFILE')]) {
        script {
          def currentGreen = sh(script: '''
            set -e
            export ANSIBLE_SSH_ARGS="-i ${SSH_KEY_PATH} -o StrictHostKeyChecking=accept-new"
            export ANSIBLE_REMOTE_USER=${ANSIBLE_REMOTE_USER}

            ${VENV_ACTIVATE} -i ${ANSIBLE_INVENTORY} ansible/prod.yml \
              --tags get_green_version \
              --vault-password-file "${VAULT_PASSFILE}" \
              -e ansible_shell_type=bash \
              -e ansible_shell_executable=/bin/bash \
            | grep -oE "v[0-9]+\\.[0-9]+\\.[0-9]+"
          ''', returnStdout: true).trim()

          sendSlackNotification("‚ö†Ô∏è Deployment *aborted*. Current green version remains *${currentGreen}*.")
        }
      }
    }
  }
}