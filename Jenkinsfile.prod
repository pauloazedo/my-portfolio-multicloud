// Slack notification helper function
// Uses secure credential ID 'slack-webhook-jenkins' to access the webhook URL
def sendSlackNotification(String message) {
  withCredentials([string(credentialsId: 'slack-webhook-jenkins', variable: 'SLACK_WEBHOOK_URL')]) {
    sh '''#!/bin/bash
      curl -X POST -H "Content-type: application/json" \
      --data "{\"text\": \"''' + message + '''\"}" \
      $SLACK_WEBHOOK_URL
    '''
  }
}

pipeline {
  agent any

  environment {
    // Ansible inventory for PROD
    ANSIBLE_INVENTORY     = 'ansible/inventory/oci.ini'

    // OCIR repo for PROD environment
    OCIR_REPO             = 'iad.ocir.io/idtijq8cx4jl/prod-site'

    // Jenkins SSH key for remote deployment
    SSH_KEY_PATH          = '/var/jenkins_home/.ssh/id_rsa'

    // Remote user and target for PROD server
    ANSIBLE_REMOTE_USER   = 'devops'
    ANSIBLE_TARGET_HOST   = 'oci.prod.pauloazedo.dev'

    // Self-deployment marker (used by Ansible for conditional logic)
    JENKINS_MARKER        = '/var/jenkins_home/.jenkins_self_deploy'

    // Frontend build sync directories
    FRONTEND_SRC_DIR      = './my-portfolio/frontend/'
    FRONTEND_DST_DIR      = '/home/devops/frontend'

    // Git-based versioning
    IMAGE_TAG_FILE        = 'image_tag.txt'

    // Ansible binary location (inside venv)
    VENV_ACTIVATE         = '/home/jenkins/venv/bin/ansible-playbook'
  }

  options {
    timestamps()
    ansiColor('xterm')
  }

  stages {

    // Used by Blue Ocean/SCM view; safely skipped
    stage('Checkout SCM') {
      steps {
        checkout scm
      }
    }

    // Explicitly pull the main branch (production branch)
    stage('Checkout main branch') {
      steps {
        git branch: 'main', url: 'https://github.com/pauloazedo/my-portfolio-multicloud.git'
      }
    }

    // Git tag as preferred Docker tag; fallback to short commit SHA if no tag
    stage('Generate Image Tag') {
      steps {
        script {
          def tag = sh(script: "git describe --tags --abbrev=0 || true", returnStdout: true).trim()
          if (tag == '') {
            tag = sh(script: "git rev-parse --short HEAD", returnStdout: true).trim()
          }
          env.IMAGE_TAG = tag
          writeFile file: IMAGE_TAG_FILE, text: env.IMAGE_TAG
        }
      }
    }

    // Sync frontend assets to PROD before container deploy
    stage('Sync Frontend to PROD (BLUE)') {
      steps {
        sh '''
          set -e
          rsync -az --delete \
            -e "ssh -i ${SSH_KEY_PATH} -o StrictHostKeyChecking=accept-new" \
            ${FRONTEND_SRC_DIR} ${ANSIBLE_REMOTE_USER}@${ANSIBLE_TARGET_HOST}:${FRONTEND_DST_DIR}
        '''
      }
    }

    // Deploy current version to blue container
    stage('Deploy BLUE Container to PROD') {
      steps {
        withCredentials([file(credentialsId: 'ansible-vault-passfile', variable: 'VAULT_PASS_FILE')]) {
          sh '''
            set -e
            echo '[INFO] Creating Jenkins self-deployment marker'
            touch ${JENKINS_MARKER}

            export ANSIBLE_SSH_ARGS="-i ${SSH_KEY_PATH} -o StrictHostKeyChecking=accept-new"
            export ANSIBLE_REMOTE_USER=${ANSIBLE_REMOTE_USER}

            ${VENV_ACTIVATE} -i ${ANSIBLE_INVENTORY} ansible/prod.yml \
              --limit prod \
              --tags prod_site \
              --extra-vars "prod_site_custom_image=${OCIR_REPO}:${IMAGE_TAG} \
                            prod_site_image_tag=blue \
                            prod_site_color=blue" \
              --vault-password-file "${VAULT_PASS_FILE}"
          '''
        }
      }
      post {
        always {
          sh 'rm -f ${JENKINS_MARKER} || true'
        }
      }
    }

    // Pause for approval before promoting to green
    stage('Manual Approval: Promote BLUE to GREEN') {
      steps {
        input message: "Promote blue container to green in PROD?"
      }
    }

    // Promote previously deployed image to green
    stage('Deploy GREEN Container to PROD') {
      steps {
        withCredentials([file(credentialsId: 'ansible-vault-passfile', variable: 'VAULT_PASS_FILE')]) {
          sh '''
            set -e
            echo '[INFO] Tagging image for GREEN deployment'

            export ANSIBLE_SSH_ARGS="-i ${SSH_KEY_PATH} -o StrictHostKeyChecking=accept-new"
            export ANSIBLE_REMOTE_USER=${ANSIBLE_REMOTE_USER}

            ${VENV_ACTIVATE} -i ${ANSIBLE_INVENTORY} ansible/prod.yml \
              --limit prod \
              --tags prod_site \
              --extra-vars "prod_site_custom_image=${OCIR_REPO}:${IMAGE_TAG} \
                            prod_site_image_tag=green \
                            prod_site_color=green" \
              --vault-password-file "${VAULT_PASS_FILE}"
          '''
        }
      }
    }
  }

  post {
    success {
      echo "‚úÖ PROD deployment completed: ${OCIR_REPO}:${env.IMAGE_TAG} promoted to GREEN"
      script {
        try {
          sendSlackNotification("üöÄ Version ${env.IMAGE_TAG} published on *PROD* (blue container). Awaiting manual approval to promote to *green*.")
        } catch (err) {
          echo "Slack notification failed: ${err.message}"
        }
      }
    }
    failure {
      echo "‚ùå Pipeline failed. Check the logs for troubleshooting."
      script {
        try {
          sendSlackNotification("‚ùå Jenkins PROD pipeline failed for ${env.JOB_NAME}.")
        } catch (err) {
          echo "Slack notification failed: ${err.message}"
        }
      }
    }
  }
}
