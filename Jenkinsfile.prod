// Jenkinsfile.prod

pipeline {
  agent any

  environment {
    ANSIBLE_INVENTORY     = 'ansible/inventory/oci.ini'
    SSH_KEY_PATH          = '/var/jenkins_home/.ssh/id_rsa'
    ANSIBLE_REMOTE_USER   = 'devops'
    ANSIBLE_TARGET_HOST   = 'oci.prod.pauloazedo.dev'
    VAULT_PASS_FILE       = '/var/jenkins_home/.vault_pass'
    CLOUD_PROVIDER        = 'oci'
    OCIR_REPO             = 'iad.ocir.io/idtijq8cx4jl/my-portfolio-site'
    OCIR_USER             = 'idtijq8cx4jl/devops.user'
  }

  options {
    timestamps()
    ansiColor('xterm')
  }

  stages {
    stage('Checkout Source') {
      steps {
        checkout scm
      }
    }

    stage('Init Environment') {
      steps {
        echo "ðŸ§­ Using CLOUD_PROVIDER=${env.CLOUD_PROVIDER}"
      }
    }

    stage('Discover Latest Tag from OCIR') {
      steps {
        withCredentials([string(credentialsId: 'ocir-token', variable: 'OCIR_PASSWORD')]) {
          script {
            def latestTag = sh(
              script: """
                skopeo list-tags --creds ${OCIR_USER}:${OCIR_PASSWORD} docker://${OCIR_REPO} | jq -r .Tags[] | sort -V | tail -n1
              """,
              returnStdout: true
            ).trim()
            env.LATEST_TAG = latestTag
            echo "âœ… Latest OCIR tag: ${env.LATEST_TAG}"
          }
        }
      }
    }

    stage('Deploy Latest Tag to BLUE Container') {
      steps {
        withCredentials([file(credentialsId: 'ansible-vault-pass', variable: 'VAULT_PASS_FILE')]) {
          sh '''
            set -e
            export ANSIBLE_SSH_ARGS="-i ${SSH_KEY_PATH} -o StrictHostKeyChecking=accept-new"
            export ANSIBLE_REMOTE_USER=${ANSIBLE_REMOTE_USER}
            /home/jenkins/venv/bin/ansible-playbook -i ${ANSIBLE_INVENTORY} ansible/prod.yml \
              --limit prod --tags prod_site,fallback \
              --extra-vars "prod_site_target=blue latest_prod_site_tag=${LATEST_TAG}" \
              --vault-password-file "${VAULT_PASS_FILE}"
          '''
        }

        slackSend (
          channel: '#jenkins_notifications',
          color: '#439FE0',
          tokenCredentialId: 'jenkins-slack-token',
          message: ":large_blue_circle: Deployed version *${env.LATEST_TAG}* to BLUE container.\nAwaiting manual approval to promote to GREEN."
        )
      }
    }

    stage('Await Manual Approval to Promote GREEN') {
      steps {
        script {
          try {
            timeout(time: 2, unit: 'HOURS') {
              input(
                message: "Promote BLUE container to GREEN?",
                ok: "Approve",
                submitterParameter: 'APPROVED_BY'
              )
            }
          } catch (err) {
            env.APPROVED_BY = 'unknown'
            slackSend (
              channel: '#jenkins_notifications',
              color: 'danger',
              tokenCredentialId: 'jenkins-slack-token',
              message: ":x: Deployment aborted by user.\nCurrent GREEN version remains unchanged."
            )
            error("Deployment approval aborted.")
          }
        }
      }
    }

    stage('Promote BLUE to GREEN Container') {
      steps {
        withCredentials([file(credentialsId: 'ansible-vault-pass', variable: 'VAULT_PASS_FILE')]) {
          sh '''
            set -e
            export ANSIBLE_SSH_ARGS="-i ${SSH_KEY_PATH} -o StrictHostKeyChecking=accept-new"
            export ANSIBLE_REMOTE_USER=${ANSIBLE_REMOTE_USER}
            /home/jenkins/venv/bin/ansible-playbook -i ${ANSIBLE_INVENTORY} ansible/prod.yml \
              --limit prod --tags prod_site \
              --extra-vars "prod_site_target=green latest_prod_site_tag=${LATEST_TAG}" \
              --vault-password-file "${VAULT_PASS_FILE}"
          '''
        }

        slackSend (
          channel: '#jenkins_notifications',
          color: 'good',
          tokenCredentialId: 'jenkins-slack-token',
          message: ":green_circle: Promoted version *${env.LATEST_TAG}* to GREEN container.\nðŸ‘¤ Approved by: *${env.APPROVED_BY}*"
        )
      }
    }
  }
}