pipeline {
  agent any

  environment {
    SSH_KEY_PATH        = '/var/jenkins_home/.ssh/id_rsa'
    ANSIBLE_REMOTE_USER = 'devops'
    ANSIBLE_INVENTORY   = 'ansible/inventory/oci.ini'
    CLOUD_PROVIDER      = 'oci'
    VENV_ACTIVATE       = '/home/jenkins/venv/bin/ansible-playbook'
    CONTAINER_REPO      = 'iad.ocir.io/idtijq8cx4jl/my-portfolio-site'
    PROD_APP_URL        = 'https://oci.prod.pauloazedo.dev'
  }

  options {
    timestamps()
    ansiColor('xterm')
  }

  stages {

    stage('Checkout Source') {
      steps {
        checkout scm
      }
    }

    stage('Init Environment') {
      steps {
        echo "üß≠ Using CLOUD_PROVIDER=${env.CLOUD_PROVIDER}"
      }
    }

    stage('Discover Latest Tag from OCIR') {
      steps {
        withCredentials([usernamePassword(
          credentialsId: 'ocir-creds',
          usernameVariable: 'OCIR_USERNAME',
          passwordVariable: 'OCIR_PASSWORD'
        )]) {
          withEnv(["OCIR_AUTH=${env.OCIR_USERNAME}:${env.OCIR_PASSWORD}"]) {
            script {
              def result = sh(script: '''
                skopeo list-tags --creds "$OCIR_AUTH" \
                  docker://${CONTAINER_REPO} \
                | jq -r .Tags[] \
                | sort -V \
                | tail -n1
              ''', returnStdout: true).trim()

              env.LATEST_TAG = result
              env.PROD_SITE_IMAGE = "${CONTAINER_REPO}:${result}"
              echo "‚úÖ Latest OCIR tag: ${env.LATEST_TAG}"
              echo "üñºÔ∏è Using image: ${env.PROD_SITE_IMAGE}"
            }
          }
        }
      }
    }

    stage('Deploy Latest Tag to BLUE Container') {
      steps {
        withCredentials([file(credentialsId: 'ansible-vault-passfile', variable: 'VAULT_PASSFILE')]) {
          sh '''
            set -e
            export ANSIBLE_SSH_ARGS="-i ${SSH_KEY_PATH} -o StrictHostKeyChecking=accept-new"
            export ANSIBLE_REMOTE_USER=${ANSIBLE_REMOTE_USER}

            ${VENV_ACTIVATE} -i ${ANSIBLE_INVENTORY} ansible/prod.yml \
              --tags run_blue,check_images \
              --extra-vars "prod_site_tag=${LATEST_TAG} \
                            prod_site_image=${PROD_SITE_IMAGE}" \
              --vault-password-file "${VAULT_PASSFILE}"
          '''
        }

        script {
          slackSend(
            channel: '#jenkins_notifications',
            color: 'good',
            message: """üöÄ Version `${env.LATEST_TAG}` deployed to *blue container* and is awaiting approval.
üîó <${env.BUILD_URL}|View Build>
üåê <${env.PROD_APP_URL}/blue|Test Blue Container>"""
          )
        }
      }
    }

    stage('Await Manual Approval to Promote GREEN') {
      steps {
        timeout(time: 2, unit: 'HOURS') {
          input message: "Promote v${env.LATEST_TAG} to green?"
        }
      }
    }

    stage('Promote BLUE to GREEN Container') {
      steps {
        withCredentials([file(credentialsId: 'ansible-vault-passfile', variable: 'VAULT_PASSFILE')]) {
          sh '''
            set -e
            export ANSIBLE_SSH_ARGS="-i ${SSH_KEY_PATH} -o StrictHostKeyChecking=accept-new"
            export ANSIBLE_REMOTE_USER=${ANSIBLE_REMOTE_USER}

            ${VENV_ACTIVATE} -i ${ANSIBLE_INVENTORY} ansible/prod.yml \
              --tags run_green \
              --extra-vars "prod_site_tag=${LATEST_TAG} \
                            prod_site_image=${PROD_SITE_IMAGE}" \
              --vault-password-file "${VAULT_PASSFILE}"
          '''
        }

        script {
          slackSend(
            channel: '#jenkins_notifications',
            color: 'good',
            message: """‚úÖ Version `${env.LATEST_TAG}` *promoted to green* and is now live.
üîó <${env.BUILD_URL}|View Build>
üåê <${env.PROD_APP_URL}|Open Live Site>"""
          )
        }
      }
    }
  }

  post {
    aborted {
      withCredentials([file(credentialsId: 'ansible-vault-passfile', variable: 'VAULT_PASSFILE')]) {
        script {
          def currentGreen = sh(script: '''
            set -e
            export ANSIBLE_SSH_ARGS="-i ${SSH_KEY_PATH} -o StrictHostKeyChecking=accept-new"
            export ANSIBLE_REMOTE_USER=${ANSIBLE_REMOTE_USER}

            ${VENV_ACTIVATE} -i ${ANSIBLE_INVENTORY} ansible/prod.yml \
              --tags get_green_version \
              --vault-password-file "${VAULT_PASSFILE}" \
              -e ansible_shell_type=bash \
              -e ansible_shell_executable=/bin/bash \
            | grep -oE "v[0-9]+\\.[0-9]+\\.[0-9]+"
          ''', returnStdout: true).trim()

          slackSend(
            channel: '#jenkins_notifications',
            color: 'warning',
            message: "‚ö†Ô∏è Deployment *aborted*. Current green version remains `${currentGreen}`."
          )
        }
      }
    }
  }
}