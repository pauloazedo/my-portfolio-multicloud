pipeline {
  agent any

  environment {
    SSH_KEY_PATH        = '/var/jenkins_home/.ssh/id_rsa'
    ANSIBLE_REMOTE_USER = 'devops'
    ANSIBLE_INVENTORY   = 'ansible/inventory/oci.ini'
    JENKINS_MARKER      = '/var/jenkins_home/.jenkins_self_deploy'
    VENV_ACTIVATE       = '/home/jenkins/venv/bin/ansible-playbook'
    CLOUD_PROVIDER      = 'oci'
  }

  options {
    timestamps()
    ansiColor('xterm')
  }

  stages {
    stage('Checkout Source') {
      steps {
        checkout scm
      }
    }

    stage('Init Environment') {
      steps {
        echo "üß≠ Using CLOUD_PROVIDER=${env.CLOUD_PROVIDER}"
      }
    }

    stage('Discover Latest Tag from OCIR') {
      steps {
        withCredentials([usernamePassword(
          credentialsId: 'ocir-creds',
          usernameVariable: 'OCIR_USERNAME',
          passwordVariable: 'OCIR_PASSWORD'
        )]) {
          withEnv(["OCIR_AUTH=${env.OCIR_USERNAME}:${env.OCIR_PASSWORD}"]) {
            script {
              def tag = sh(script: '''
                skopeo list-tags --creds "$OCIR_AUTH" \
                  docker://iad.ocir.io/idtijq8cx4jl/my-portfolio-site \
                | jq -r .Tags[] \
                | sort -V \
                | tail -n1
              ''', returnStdout: true).trim()

              env.IMAGE_TAG = tag
              env.PROD_IMAGE = "iad.ocir.io/idtijq8cx4jl/my-portfolio-site:${tag}"
              echo "‚úÖ Latest OCIR tag: ${env.IMAGE_TAG}"
              echo "üñºÔ∏è Using image: ${env.PROD_IMAGE}"
            }
          }
        }
      }
    }

    stage('Deploy Latest Tag to BLUE Container') {
      steps {
        withCredentials([file(credentialsId: 'ansible-vault-passfile', variable: 'VAULT_PASSFILE')]) {
          sh '''
            set -e
            touch ${JENKINS_MARKER}
            export ANSIBLE_SSH_ARGS="-i ${SSH_KEY_PATH} -o StrictHostKeyChecking=accept-new"
            export ANSIBLE_REMOTE_USER=${ANSIBLE_REMOTE_USER}

            ${VENV_ACTIVATE} -i ${ANSIBLE_INVENTORY} ansible/prod.yml \
              --tags check_images,run_blue \
              --extra-vars "latest_prod_site_tag=${IMAGE_TAG} \
                            prod_site_tag=${PROD_IMAGE} \
                            prod_site_image=${PROD_IMAGE} \
                            blue_image_available=true" \
              --vault-password-file "${VAULT_PASSFILE}"
          '''
        }
      }

      post {
        always {
          sh 'rm -f ${JENKINS_MARKER} || true'
        }
      }
    }

    stage('Await Manual Approval to Promote GREEN') {
      steps {
        timeout(time: 2, unit: 'HOURS') {
          input message: "Promote v${env.IMAGE_TAG} to green?"
        }
      }
    }

    stage('Promote BLUE to GREEN Container') {
      steps {
        withCredentials([file(credentialsId: 'ansible-vault-passfile', variable: 'VAULT_PASSFILE')]) {
          sh '''
            set -e
            export ANSIBLE_SSH_ARGS="-i ${SSH_KEY_PATH} -o StrictHostKeyChecking=accept-new"
            export ANSIBLE_REMOTE_USER=${ANSIBLE_REMOTE_USER}

            ${VENV_ACTIVATE} -i ${ANSIBLE_INVENTORY} ansible/prod.yml \
              --tags run_green \
              --extra-vars "latest_prod_site_tag=${IMAGE_TAG} \
                            prod_site_tag=${PROD_IMAGE} \
                            prod_site_image=${PROD_IMAGE} \
                            green_image_available=true" \
              --vault-password-file "${VAULT_PASSFILE}"
          '''
        }
      }
    }
  }

  post {
    success {
      script {
        slackSend(
          channel: '#jenkins_notifications',
          color: 'good',
          message: """‚úÖ *v${env.IMAGE_TAG}* promoted to *GREEN container* in production.
üîó <${env.BUILD_URL}|View Jenkins Build>"""
        )
      }
    }

    aborted {
      script {
        def currentGreen = sh(script: '''
          set -e
          export ANSIBLE_SSH_ARGS="-i ${SSH_KEY_PATH} -o StrictHostKeyChecking=accept-new"
          export ANSIBLE_REMOTE_USER=${ANSIBLE_REMOTE_USER}

          ${VENV_ACTIVATE} -i ${ANSIBLE_INVENTORY} ansible/prod.yml \
            --tags get_green_version \
            --vault-password-file "${VAULT_PASSFILE}" \
            -e ansible_shell_type=bash \
            -e ansible_shell_executable=/bin/bash \
          | grep -oE "v[0-9]+\\.[0-9]+\\.[0-9]+"
        ''', returnStdout: true).trim()

        slackSend(
          channel: '#jenkins_notifications',
          color: 'warning',
          message: """‚ö†Ô∏è *Deployment ABORTED*. Green version remains: *${currentGreen}*.
üîó <${env.BUILD_URL}|View Jenkins Build>"""
        )
      }
    }

    failure {
      script {
        slackSend(
          channel: '#jenkins_notifications',
          color: 'danger',
          message: """‚ùå *PROD Pipeline FAILED* for version `${env.IMAGE_TAG}`
üîó <${env.BUILD_URL}|View Jenkins Build>"""
        )
      }
    }
  }
}