pipeline {
  agent any

  environment {
    CLOUD_PROVIDER        = 'oci'
    SSH_KEY_PATH          = '/var/jenkins_home/.ssh/id_rsa'
    ANSIBLE_REMOTE_USER   = 'devops'
    VENV_ACTIVATE         = '/home/jenkins/venv/bin/ansible-playbook'
    OCIR_REPO             = 'iad.ocir.io/idtijq8cx4jl/my-portfolio-site'
    VAULT_PASSFILE        = '/var/jenkins_home/.vault_pass.txt'
  }

  options {
    timestamps()
    ansiColor('xterm')
  }

  stages {
    stage('Checkout Source') {
      steps {
        checkout scm
      }
    }

    stage('Init Environment') {
      steps {
        echo "üß≠ Using CLOUD_PROVIDER=${env.CLOUD_PROVIDER}"
      }
    }

    stage('Discover Latest Tag from OCIR') {
      steps {
        withCredentials([usernamePassword(
          credentialsId: 'ocir-creds',
          usernameVariable: 'OCIR_USER',
          passwordVariable: 'OCIR_PASSWORD'
        )]) {
          withEnv(["OCIR_AUTH=${OCIR_USER}:${OCIR_PASSWORD}"]) {
            script {
              def latestTag = sh(
                script: 'skopeo list-tags --creds "$OCIR_AUTH" docker://${OCIR_REPO} | jq -r .Tags[] | sort -V | tail -n1',
                returnStdout: true
              ).trim()

              if (!latestTag) {
                error "‚ùå No tags found in OCIR repo: ${env.OCIR_REPO}"
              }

              echo "‚úÖ Latest OCIR tag: ${latestTag}"
              env.LATEST_PROD_TAG = latestTag
              env.IMAGE_TAG = "${env.OCIR_REPO}:${latestTag}"
            }
          }
        }
      }
    }

    stage('Deploy Latest Tag to BLUE Container') {
      steps {
        withCredentials([file(credentialsId: 'ansible-vault-passfile', variable: 'VAULT_PASSFILE')]) {
          sh """
            set -e
            export ANSIBLE_SSH_ARGS="-i ${SSH_KEY_PATH} -o StrictHostKeyChecking=accept-new"
            export ANSIBLE_REMOTE_USER=${ANSIBLE_REMOTE_USER}

            ${VENV_ACTIVATE} -i ansible/inventory/oci.ini ansible/prod.yml \\
              --tags "check_images,run_blue" \\
              --extra-vars "prod_site_target=blue prod_site_tag=${IMAGE_TAG} prod_site_image=${IMAGE_TAG} latest_prod_site_tag=${LATEST_PROD_TAG}" \\
              --vault-password-file "${VAULT_PASSFILE}"
          """
        }
      }
    }

    stage('Await Manual Approval to Promote GREEN') {
      steps {
        timeout(time: 2, unit: 'HOURS') {
          input message: "Promote v${env.LATEST_PROD_TAG} to green?"
        }
      }
    }

    stage('Promote BLUE to GREEN') {
      steps {
        withCredentials([file(credentialsId: 'ansible-vault-passfile', variable: 'VAULT_PASSFILE')]) {
          sh """
            set -e
            export ANSIBLE_SSH_ARGS="-i ${SSH_KEY_PATH} -o StrictHostKeyChecking=accept-new"
            export ANSIBLE_REMOTE_USER=${ANSIBLE_REMOTE_USER}

            ${VENV_ACTIVATE} -i ansible/inventory/oci.ini ansible/prod.yml \\
              --tags "run_green" \\
              --extra-vars "prod_site_target=green prod_site_tag=${IMAGE_TAG} prod_site_image=${IMAGE_TAG} latest_prod_site_tag=${LATEST_PROD_TAG}" \\
              --vault-password-file "${VAULT_PASSFILE}"
          """
        }
      }
    }
  }

  post {
    failure {
      echo "üö® Pipeline failed"
    }
    aborted {
      echo "üõë Pipeline aborted by user"
    }
  }
}