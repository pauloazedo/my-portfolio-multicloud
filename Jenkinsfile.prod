// Slack notification helper
def sendSlackNotification(String message) {
  withCredentials([string(credentialsId: 'slack-webhook-jenkins', variable: 'SLACK_WEBHOOK_URL')]) {
    script {
      sh """
        curl -s -X POST -H "Content-type: application/json" \\
          --data '{"text": "${message}"}' \\
          "\${SLACK_WEBHOOK_URL}"
      """
    }
  }
}

pipeline {
  agent any

  environment {
    ANSIBLE_INVENTORY     = 'ansible/inventory/oci.ini'
    OCIR_REPO             = 'iad.ocir.io/idtijq8cx4jl/prod-site'
    SSH_KEY_PATH          = '/var/jenkins_home/.ssh/id_rsa'
    ANSIBLE_REMOTE_USER   = 'devops'
    ANSIBLE_TARGET_HOST   = 'oci.prod.pauloazedo.dev'
    JENKINS_MARKER        = '/var/jenkins_home/.jenkins_self_deploy'
    FRONTEND_SRC_DIR      = './my-portfolio/frontend/'
    FRONTEND_DST_DIR      = '/home/devops/frontend'
    IMAGE_TAG_FILE        = 'image_tag.txt'
    VENV_ACTIVATE         = '/home/jenkins/venv/bin/ansible-playbook'
    PROD_BLUE_URL         = 'https://oci.prod.pauloazedo.dev/blue'
    PROD_LIVE_URL         = 'https://www.pauloazedo.dev'
  }

  options {
    timestamps()
    ansiColor('xterm')
  }

  stages {

    stage('Checkout SCM') {
      steps {
        checkout scm
      }
    }

    stage('Checkout main branch') {
      steps {
        git branch: 'main', url: 'https://github.com/pauloazedo/my-portfolio-multicloud.git'
      }
    }

    stage('Generate Image Tag') {
      steps {
        script {
          def tag = sh(script: "git describe --tags --abbrev=0 || true", returnStdout: true).trim()
          if (!tag) {
            tag = sh(script: "git rev-parse --short HEAD", returnStdout: true).trim()
          }
          env.IMAGE_TAG = tag
          writeFile file: IMAGE_TAG_FILE, text: env.IMAGE_TAG
        }
      }
    }

    stage('Sync Frontend to PROD (BLUE)') {
      steps {
        sh '''
          set -e
          rsync -az --delete \
            -e "ssh -i ${SSH_KEY_PATH} -o StrictHostKeyChecking=accept-new" \
            ${FRONTEND_SRC_DIR} ${ANSIBLE_REMOTE_USER}@${ANSIBLE_TARGET_HOST}:${FRONTEND_DST_DIR}
        '''
      }
    }

    stage('Deploy BLUE Container to PROD') {
      steps {
        withCredentials([file(credentialsId: 'ansible-vault-passfile', variable: 'VAULT_PASS_FILE')]) {
          sh '''
            set -e
            echo '[INFO] Creating Jenkins self-deployment marker'
            touch ${JENKINS_MARKER}

            export ANSIBLE_SSH_ARGS="-i ${SSH_KEY_PATH} -o StrictHostKeyChecking=accept-new"
            export ANSIBLE_REMOTE_USER=${ANSIBLE_REMOTE_USER}

            ${VENV_ACTIVATE} -i ${ANSIBLE_INVENTORY} ansible/prod.yml \
              --limit prod \
              --tags prod_site \
              --extra-vars "prod_site_custom_image=${OCIR_REPO}:${IMAGE_TAG} \
                            prod_site_image_tag=blue \
                            prod_site_color=blue" \
              --vault-password-file "${VAULT_PASS_FILE}"
          '''
        }
      }

      post {
        always {
          sh 'rm -f ${JENKINS_MARKER} || true'
        }
        success {
          echo "‚úÖ BLUE deployment completed: ${OCIR_REPO}:${env.IMAGE_TAG}"
          script {
            sendSlackNotification("""üöÄ *New version* `${env.IMAGE_TAG}` has been deployed to the *preview environment (BLUE)*.

üîç Review here: <${env.PROD_BLUE_URL}|Preview the app>
üõ†Ô∏è Jenkins build: <${env.BUILD_URL}|View build log>

üß™ *To make this version live*, manual approval is required.
üëâ <${env.BUILD_URL}|Click here to approve and promote to production>""")
          }
        }
      }
    }

    stage('Manual Approval: Promote BLUE to GREEN') {
      steps {
        input message: "Promote BLUE container to GREEN (LIVE)?"
      }
    }

    stage('Deploy GREEN Container to PROD') {
      steps {
        withCredentials([file(credentialsId: 'ansible-vault-passfile', variable: 'VAULT_PASS_FILE')]) {
          sh '''
            set -e
            echo '[INFO] Tagging image for GREEN deployment'

            export ANSIBLE_SSH_ARGS="-i ${SSH_KEY_PATH} -o StrictHostKeyChecking=accept-new"
            export ANSIBLE_REMOTE_USER=${ANSIBLE_REMOTE_USER}

            ${VENV_ACTIVATE} -i ${ANSIBLE_INVENTORY} ansible/prod.yml \
              --limit prod \
              --tags prod_site \
              --extra-vars "prod_site_custom_image=${OCIR_REPO}:${IMAGE_TAG} \
                            prod_site_image_tag=green \
                            prod_site_color=green" \
              --vault-password-file "${VAULT_PASS_FILE}"
          '''
        }
      }

      post {
        success {
          echo "‚úÖ GREEN deployment completed: ${OCIR_REPO}:${env.IMAGE_TAG} is now live"
          script {
            sendSlackNotification("""‚úÖ Version `${env.IMAGE_TAG}` is now *LIVE* in production.

üåê Visit the app: <${env.PROD_LIVE_URL}|Open www.pauloazedo.dev>
üõ†Ô∏è Jenkins build: <${env.BUILD_URL}|View build log>""")
          }
        }
      }
    }
  }

  post {
    failure {
      echo "‚ùå Pipeline failed. Check the logs for troubleshooting."
      script {
        sendSlackNotification("‚ùå *PROD Pipeline FAILED* for `${env.JOB_NAME}`.\nüîó <${env.BUILD_URL}|View Jenkins build>")
      }
    }
  }
}
