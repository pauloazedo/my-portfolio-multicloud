---
# ansible/roles/uat_site/tasks/main.yml
# UAT Site Deployment Entry Point

############################################################
# Step 1: Ensure Docker is installed
############################################################
- name: Ensure Docker is installed on UAT
  ansible.builtin.include_role:
    name: "{{ docker_role | default('docker') }}"

############################################################
# Step 2: Authenticate with OCIR
############################################################
- name: Always try logging into OCIR (robust and visible)
  ansible.builtin.command:
    cmd: >
      docker login iad.ocir.io
      -u {{ ocir_user }}
      -p {{ ocir_token }}
  register: ocir_login_result
  changed_when: "'Login Succeeded' in ocir_login_result.stdout"
  failed_when: ocir_login_result.rc != 0
  no_log: false

############################################################
# Step 3: Remove any previous container
############################################################
- name: Stop and remove existing UAT site container (if any)
  community.docker.docker_container:
    name: "{{ uat_site_container }}"
    state: absent
    force_kill: true

############################################################
# Step 4: Attempt to pull latest image
############################################################
- name: Try to pull UAT site image from OCIR
  community.docker.docker_image:
    name: "{{ uat_site_image }}"
    source: pull
  register: uat_image_pull
  ignore_errors: true
  failed_when: false

############################################################
# Step 5: Check if image is available locally
############################################################
- name: Check if image exists locally
  community.docker.docker_image_info:
    name: "{{ uat_site_image }}"
  register: uat_local_image_info
  failed_when: false
  changed_when: false

- name: Set internal flag if image is available
  ansible.builtin.set_fact:
    uat_image_available: "{{ uat_local_image_info.images | length > 0 }}"

- name: Debug image availability
  ansible.builtin.debug:
    msg: "Image pulled: {{ uat_image_pull.changed }}, Local image found: {{ uat_image_available }}"

############################################################
# Step 6: Set fallback variables (if needed)
############################################################
- name: Set fallback template variables
  ansible.builtin.set_fact:
    fallback_color: blue
    fallback_jenkins_domain: "{{ jenkins_domain }}"
  when: not (uat_image_available | default(false))
  tags: fallback

- name: Render fallback HTML page for UAT
  ansible.builtin.template:
    src: files/uat-fallback-index.html.j2
    dest: /home/devops/uat-fallback-index.html
    owner: devops
    group: devops
    mode: '0644'
  when: not (uat_image_available | default(false))
  tags: fallback

############################################################
# Step 7: Deploy app or fallback container
############################################################
- name: Run site UAT container
  ansible.builtin.import_tasks: run-site.yml
  when: uat_image_available | default(false)

- name: Run fallback UAT container
  ansible.builtin.import_tasks: run-fallback.yml
  when: not (uat_image_available | default(false))

- name: Cleanup older fallback images
  ansible.builtin.import_tasks: cleanup.yml
  when: not (uat_image_available | default(false))
