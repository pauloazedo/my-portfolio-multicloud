---
# ansible/roles/uat_site/tasks/main.yml
# UAT Site Deployment Entry Point (Multi-Cloud Compatible)

############################################################
# Step 1: Ensure Docker is installed
############################################################
- name: Ensure Docker is installed on UAT
  ansible.builtin.include_role:
    name: "{{ docker_role | default('docker') }}"
  tags: uat_site

############################################################
# Step 2: Authenticate with Container Registry (multi-cloud)
############################################################
- name: Check if already logged into registry
  ansible.builtin.command: docker info
  register: docker_info_check
  changed_when: false
  failed_when: false
  tags: uat_site

- name: Authenticate with container registry
  ansible.builtin.command:
    cmd: >
      docker login {{ container_registry_url }}
      -u {{ container_registry_user }}
      -p {{ container_registry_token }}
  when: docker_info_check.stdout is not search(container_registry_url)
  no_log: true
  changed_when: false
  tags: uat_site

############################################################
# Step 3: Render dynamic .env.production file
############################################################
- name: Render .env.production with version and cloud provider
  ansible.builtin.template:
    src: env.production.j2
    dest: "{{ frontend_source_dir }}/.env.production"
    owner: devops
    group: devops
    mode: '0644'
  vars:
    frontend_source_dir: "/home/devops/frontend"
    latest_tag: "{{ uat_site_image_tag | default('unknown') }}"
  when: uat_site_image_tag is defined
  tags: uat_site

############################################################
# Step 4: Build and push image (only if tag is defined)
############################################################
- name: Build and push UAT site Docker image
  ansible.builtin.import_tasks: image.yml
  when: uat_site_image_tag is defined
  tags: uat_site

############################################################
# Step 5: Stop and remove previous container
############################################################
- name: Stop and remove existing UAT site container
  community.docker.docker_container:
    name: "{{ uat_site_container }}"
    state: absent
    force_kill: true
  tags: uat_site

############################################################
# Step 6: Pull image from registry and check availability
############################################################
- name: Pull UAT site image from registry
  community.docker.docker_image:
    name: "{{ uat_site_image }}"
    source: pull
  register: uat_image_pull
  ignore_errors: true
  failed_when: false
  tags: uat_site

- name: Check if image exists locally
  community.docker.docker_image_info:
    name: "{{ uat_site_image }}"
  register: uat_local_image_info
  changed_when: false
  failed_when: false
  tags: uat_site

- name: Set image availability flag
  ansible.builtin.set_fact:
    uat_image_available: "{{ uat_local_image_info.images | length > 0 }}"
  tags: uat_site

- name: Show image availability
  ansible.builtin.debug:
    msg: "Image pulled: {{ uat_image_pull.changed }}, Local image found: {{ uat_image_available }}"
  tags: uat_site

############################################################
# Step 7: Fallback Preparation (if image is not available)
############################################################
- name: Fallback setup block
  when: not uat_image_available | default(false)
  tags: [uat_site, fallback]
  block:
    - name: Set fallback variables
      ansible.builtin.set_fact:
        fallback_color: blue
        fallback_jenkins_domain: "{{ jenkins_domain }}"

    - name: Render fallback HTML as index.template.html
      ansible.builtin.template:
        src: uat-fallback-index.html.j2
        dest: /home/devops/index.template.html
        owner: devops
        group: devops
        mode: '0644'

    - name: Ensure fallback build directory exists
      ansible.builtin.file:
        path: "{{ uat_site_fallback_build_dir }}"
        state: directory
        owner: devops
        group: devops
        mode: '0755'

    - name: Copy fallback Dockerfile
      ansible.builtin.copy:
        src: uat-fallback.Dockerfile
        dest: "{{ uat_site_fallback_build_dir }}/Dockerfile"
        owner: devops
        group: devops
        mode: '0644'

    - name: Copy shared fallback NGINX config
      ansible.builtin.copy:
        src: default-waiting.conf
        dest: "{{ uat_site_fallback_build_dir }}/default-waiting.conf"
        owner: devops
        group: devops
        mode: '0644'

    - name: Copy rendered fallback HTML into build context
      ansible.builtin.copy:
        src: /home/devops/index.template.html
        dest: "{{ uat_site_fallback_build_dir }}/index.template.html"
        remote_src: true
        owner: devops
        group: devops
        mode: '0644'

############################################################
# Step 8: Run appropriate container
############################################################
- name: Deploy real UAT site container
  ansible.builtin.import_tasks: run-site.yml
  when: uat_image_available | default(false)
  tags: uat_site

- name: Deploy fallback UAT container
  ansible.builtin.import_tasks: run-fallback.yml
  when: not uat_image_available | default(false)
  tags: [uat_site, fallback]

- name: Cleanup old fallback images
  ansible.builtin.import_tasks: cleanup.yml
  when: not uat_image_available | default(false)
  tags: [uat_site, fallback]

- name: Final Docker system cleanup to reclaim disk space
  ansible.builtin.import_tasks: docker-prune.yml
  tags: [uat_site, cleanup]
