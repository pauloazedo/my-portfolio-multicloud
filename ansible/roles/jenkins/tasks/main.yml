---
# Main Jenkins role tasks

# Step 1: Generate and install SSH key for Jenkins remote Ansible access
- name: Include SSH key setup for Jenkins remote Ansible access
  ansible.builtin.include_tasks: ssh.yml

# Step 2: Pull the latest Jenkins LTS image (multi-arch, includes ARM64)
- name: Pull Jenkins LTS Docker image
  community.docker.docker_image:
    name: jenkins/jenkins
    tag: lts
    source: pull

# Step 3: Ensure persistent data directory exists
- name: Ensure Jenkins data directory exists
  ansible.builtin.file:
    path: /home/devops/jenkins_data
    state: directory
    owner: devops
    group: devops
    mode: '0755'

# Step 4: Run Jenkins container with plugins.txt mounted
- name: Run Jenkins container
  community.docker.docker_container:
    name: jenkins
    image: jenkins/jenkins:lts
    state: started
    restart_policy: always
    published_ports:
      - "8080:8080"
      - "50000:50000"
    volumes:
      - /home/devops/jenkins_data:/var/jenkins_home
      - "{{ role_path }}/files/plugins.txt:/plugins.txt:ro"
    user: root

# Step 5: Install Jenkins plugins from plugins.txt (only if not already installed)
- name: Install Jenkins plugins via jenkins-plugin-cli
  community.docker.docker_container_exec:
    container: jenkins
    command: >
      bash -c "cat /plugins.txt | xargs jenkins-plugin-cli --plugins"
  register: plugin_install_result
  failed_when: plugin_install_result.rc != 0
  notify: Restart Jenkins

# Step 6: Create plugins-installed flag
- name: Create plugins-installed marker file
  ansible.builtin.file:
    path: /home/devops/jenkins_data/.plugins-installed
    state: touch
    owner: devops
    group: devops
    mode: '0644'

# Step 7: Install Python, pip, Ansible, and OCI SDK inside Jenkins container (using virtualenv)
- name: Install python3-venv and dependencies inside Jenkins container to create virtual environment
  community.docker.docker_container_exec:
    container: jenkins
    command: >
      bash -c "apt-get update &&
               apt-get install -y python3-venv python3-pip &&
               python3 -m venv /home/jenkins/venv &&
               /home/jenkins/venv/bin/pip install --upgrade pip &&
               /home/jenkins/venv/bin/pip install ansible oci"
  become: true

# Step 8: Install pipx if not installed
- name: Install pipx inside Jenkins container (if not already installed)
  community.docker.docker_container_exec:
    container: jenkins
    command: >
      bash -c "apt-get update &&
               apt-get install -y pipx"
  become: true
  when: ansible_facts.packages['pipx'] is not defined

# Step 9: Install jenkins-plugin-cli via pipx
- name: Install jenkins-plugin-cli via pipx
  community.docker.docker_container_exec:
    container: jenkins
    command: >
      bash -c "pipx install jenkins-plugin-cli"
  become: true
  when: ansible_facts.packages['pipx'] is defined