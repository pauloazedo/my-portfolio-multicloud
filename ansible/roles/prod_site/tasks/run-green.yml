# ansible/roles/prod_site/tasks/run-green.yml

#####################################################################
# Step 1: Remove existing green container (if any)
#####################################################################
- name: Remove existing green container if present
  community.docker.docker_container:
    name: "{{ prod_site_green_container }}"
    state: absent
    force_kill: true
  register: green_cleanup
  ignore_errors: true

- name: Log green container cleanup result
  ansible.builtin.debug:
    msg: "Removed existing green container: {{ green_cleanup.changed }}"

#####################################################################
# Step 2: Run green container with versioned image
#####################################################################
- name: Run green container with versioned image ({{ prod_site_tag }})
  community.docker.docker_container:
    name: "{{ prod_site_green_container }}"
    image: "{{ prod_site_tag }}"
    restart_policy: always
    published_ports:
      - "{{ prod_site_green_port }}:3000"
    recreate: true
    state: started
    env:
      NEXT_PUBLIC_APP_VERSION: "{{ prod_site_tag }}"
      NEXT_PUBLIC_CLOUD_PROVIDER: "{{ cloud_provider | upper }}"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s
  when: green_image_available | bool
  tags: [prod_site, deploy]

- name: Persist promoted green version for rollback
  ansible.builtin.copy:
    dest: /home/devops/last-promoted-green.txt
    content: "{{ prod_site_tag }}"
    owner: devops
    group: devops
    mode: '0644'
  when: green_image_available | bool
  tags: [prod_site, promote]

#####################################################################
# Step 3: Run fallback green container (if image is missing)
#####################################################################
- name: Run green container with fallback image
  community.docker.docker_container:
    name: "{{ prod_site_green_container }}"
    image: "{{ prod_site_waiting_image }}"
    restart_policy: always
    published_ports:
      - "{{ prod_site_green_port }}:3000"
    recreate: true
    state: started
    env: "{{ prod_site_green_env | default({}) }}"
  when: not (green_image_available | default(false) | bool)
  tags: [prod_site, fallback]
