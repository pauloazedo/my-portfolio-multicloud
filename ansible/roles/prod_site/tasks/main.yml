---
# PROD Site Deployment - Blue/Green with fallback and image labeling

# Step 1: Ensure Docker is installed
- name: Ensure Docker is installed
  ansible.builtin.include_role:
    name: docker
  tags: always

# Step 2: Authenticate to OCIR (if not already logged in)
- name: Check if already logged into OCIR
  ansible.builtin.command: docker info
  register: docker_info_check
  failed_when: false
  changed_when: false

- name: Login to OCIR (if not already logged in)
  ansible.builtin.command:
    cmd: >
      docker login iad.ocir.io
      -u {{ ocir_user }}
      -p {{ ocir_token }}
  when: docker_info_check.stdout is not search('iad.ocir.io')
  no_log: true
  changed_when: false

# Step 3: Try pulling green and blue images from OCIR
- name: Try to pull green image
  community.docker.docker_image:
    name: "{{ prod_site_green_image }}"
    source: pull
  register: green_image_check
  failed_when: false
  ignore_errors: true

- name: Try to pull blue image
  community.docker.docker_image:
    name: "{{ prod_site_blue_image }}"
    source: pull
  register: blue_image_check
  failed_when: false
  ignore_errors: true

# Step 4: Set image availability flags
- name: Set image availability flags
  ansible.builtin.set_fact:
    green_image_available: >-
      {{ ('Image is up to date' in green_image_check.msg)
         or ('Downloaded newer image' in green_image_check.msg) }}
    blue_image_available: >-
      {{ ('Image is up to date' in blue_image_check.msg)
         or ('Downloaded newer image' in blue_image_check.msg) }}

- name: Show green/blue image availability
  ansible.builtin.debug:
    msg: >
      Green: {{ green_image_available | default(false) }},
      Blue: {{ blue_image_available | default(false) }}

# Step 5: Build and push fallback image if both fail
- name: Copy fallback PROD Dockerfile to remote host
  ansible.builtin.copy:
    src: files/prod-waiting.Dockerfile
    dest: /home/devops/prod-waiting.Dockerfile
    owner: devops
    group: devops
    mode: '0644'
  when: not green_image_available and not blue_image_available

- name: Build prod-waiting fallback image (local tag)
  community.docker.docker_image:
    name: "prod-waiting"
    tag: "latest"
    source: build
    build:
      path: /home/devops
      dockerfile: prod-waiting.Dockerfile
      labels:
        org.opencontainers.image.created: "{{ ansible_date_time.iso8601 }}"
        org.opencontainers.image.description: "Fallback PROD site - waiting for Jenkins"
        org.opencontainers.image.source: "ansible"
  when: not green_image_available and not blue_image_available

- name: Tag fallback image for OCIR
  ansible.builtin.command:
    cmd: >
      docker tag prod-waiting:latest {{ prod_site_waiting_image }}
  when: not green_image_available and not blue_image_available
  changed_when: true
  check_mode: false

- name: Push fallback image to OCIR
  ansible.builtin.command:
    cmd: >
      docker push {{ prod_site_waiting_image }}
  when: not green_image_available and not blue_image_available
  changed_when: true
  check_mode: false

- name: Clean up temporary PROD Dockerfile from remote host
  ansible.builtin.file:
    path: /home/devops/prod-waiting.Dockerfile
    state: absent
  when: not green_image_available and not blue_image_available

# Step 6: Stop and remove any existing containers
- name: Stop and remove green container
  community.docker.docker_container:
    name: "{{ prod_site_green_container }}"
    state: absent
    force_kill: true

- name: Stop and remove blue container
  community.docker.docker_container:
    name: "{{ prod_site_blue_container }}"
    state: absent
    force_kill: true

# Step 7: Start green container (real or fallback)
- name: Start green container with real image
  community.docker.docker_container:
    name: "{{ prod_site_green_container }}"
    image: "{{ prod_site_green_image }}"
    restart_policy: always
    published_ports:
      - "{{ prod_site_green_port }}:3000"
    state: started
  when: green_image_available | default(false)

- name: Start green container with fallback image
  community.docker.docker_container:
    name: "{{ prod_site_green_container }}"
    image: "{{ prod_site_waiting_image }}"
    restart_policy: always
    published_ports:
      - "{{ prod_site_green_port }}:3000"
    state: started
  when: not green_image_available | default(false)

# Step 8: Start blue container (real or fallback)
- name: Start blue container with real image
  community.docker.docker_container:
    name: "{{ prod_site_blue_container }}"
    image: "{{ prod_site_blue_image }}"
    restart_policy: always
    published_ports:
      - "{{ prod_site_blue_port }}:3000"
    state: started
  when: blue_image_available | default(false)

- name: Start blue container with fallback image
  community.docker.docker_container:
    name: "{{ prod_site_blue_container }}"
    image: "{{ prod_site_waiting_image }}"
    restart_policy: always
    published_ports:
      - "{{ prod_site_blue_port }}:3000"
    state: started
  when: not blue_image_available | default(false)
