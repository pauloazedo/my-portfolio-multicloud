# ansible/roles/prod_site/tasks/main.yml
# PROD Site Blue/Green Deployment Logic with Fallback

#####################################################################
# Step 1: Ensure Docker is installed on the PROD host
#####################################################################
- name: Ensure Docker is installed
  ansible.builtin.include_role:
    name: docker
  tags: always

#####################################################################
# Step 2: Authenticate with OCIR (Oracle Container Registry)
#####################################################################
- name: Check if already logged into OCIR
  ansible.builtin.command: docker info
  register: docker_info_check
  changed_when: false
  failed_when: false

- name: Login to OCIR (if not already logged in)
  ansible.builtin.command:
    cmd: >
      docker login iad.ocir.io
      -u {{ ocir_user }}
      -p {{ ocir_token }}
  when: docker_info_check.stdout is not search('iad.ocir.io')
  no_log: true
  changed_when: false

#####################################################################
# Step 3: Check image availability
#####################################################################
- name: Check availability of versioned images
  ansible.builtin.include_tasks: check_images.yml
  when:
    - not (force_fallback | default(false))
    - latest_prod_site_tag is defined
    - (latest_prod_site_tag | default('')) != ""
  tags: [fallback, prod_site]

#####################################################################
# Step 4: Run fallback logic if no tags were found or forced
#####################################################################
- name: Skip blue/green deploy and run fallback if no image is available
  ansible.builtin.include_tasks: run-fallback.yml
  when:
    - force_fallback | default(false)
      or (latest_prod_site_tag is not defined or (latest_prod_site_tag | default('')) == "")
  tags:
    - fallback

#####################################################################
# Step 5: Deploy blue and green containers
#####################################################################
- name: Deploy blue container
  ansible.builtin.include_tasks: run-blue.yml
  when:
    - not (force_fallback | default(false))
    - latest_prod_site_tag is defined
    - (latest_prod_site_tag | default('')) != ""
    - prod_site_target in ["both", "blue"]

- name: Deploy green container
  ansible.builtin.include_tasks: run-green.yml
  when:
    - not (force_fallback | default(false))
    - latest_prod_site_tag is defined
    - (latest_prod_site_tag | default('')) != ""
    - prod_site_target in ["both", "green"]

#####################################################################
# Step 6: Cleanup fallback artifacts
#####################################################################
- name: Cleanup fallback for blue
  ansible.builtin.include_tasks: cleanup-blue.yml
  when:
    - not (force_fallback | default(false))
    - latest_prod_site_tag is defined
    - (latest_prod_site_tag | default('')) != ""
    - prod_site_target in ["both", "blue"]
    - not (blue_image_available | default(false)) and not (green_image_available | default(false))
  tags: fallback

- name: Cleanup fallback for green
  ansible.builtin.include_tasks: cleanup-green.yml
  when:
    - not (force_fallback | default(false))
    - latest_prod_site_tag is defined
    - (latest_prod_site_tag | default('')) != ""
    - prod_site_target in ["both", "green"]
    - not (blue_image_available | default(false)) and not (green_image_available | default(false))
  tags: fallback

#####################################################################
# Step 7: Final Docker system cleanup
#####################################################################
- name: Final Docker cleanup
  ansible.builtin.import_tasks: docker-prune.yml
  tags: [prod_site, cleanup]
