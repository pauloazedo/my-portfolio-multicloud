# ansible/roles/prod_site/tasks/main.yml
# PROD Site Blue/Green Deployment Logic with Fallback

#####################################################################
# Step 1: Ensure Docker is installed on the PROD host
#####################################################################
- name: Ensure Docker is installed
  ansible.builtin.include_role:
    name: "{{ docker_role | default('docker') }}"
  tags: always

#####################################################################
# Step 2: Authenticate with Container Registry (Multi-Cloud)
#####################################################################
- name: Check if already logged into registry
  ansible.builtin.command: docker info
  register: docker_info_check
  changed_when: false
  failed_when: false

- name: Login to container registry (if not already logged in)
  ansible.builtin.command:
    cmd: >
      docker login {{ container_registry_url }}
      -u {{ container_registry_user }}
      -p {{ container_registry_token }}
  when: docker_info_check.stdout is not search(container_registry_url)
  no_log: true
  changed_when: false

#####################################################################
# Step 3: Set single image reference from latest tag (only if not passed)
#####################################################################
- name: Set image reference from latest tag
  ansible.builtin.set_fact:
    prod_site_tag: "{{ prod_site_image_repo }}:{{ latest_prod_site_tag }}"
  when:
    - prod_site_tag is not defined
    - latest_prod_site_tag is defined
    - latest_prod_site_tag | length > 0
  tags: always

#####################################################################
# Step 4: Check image availability
#####################################################################
- name: Check availability of versioned image
  ansible.builtin.include_tasks: check_images.yml
  when:
    - not (force_fallback | default(false))
    - latest_prod_site_tag is defined
    - latest_prod_site_tag | length > 0
  tags: [fallback, prod_site]

#####################################################################
# Step 5: Run fallback logic if no tag was found or fallback is forced
#####################################################################
- name: Skip blue/green deploy and run fallback if no image is available
  ansible.builtin.include_tasks: run-fallback.yml
  when:
    - force_fallback | default(false)
      or (latest_prod_site_tag is not defined or latest_prod_site_tag | length == 0)
  tags: [fallback]

#####################################################################
# Step 6: Deploy blue and green containers
#####################################################################
- name: Deploy blue container
  ansible.builtin.include_tasks: run-blue.yml
  when:
    - not (force_fallback | default(false))
    - latest_prod_site_tag is defined
    - latest_prod_site_tag | length > 0
    - prod_site_target in ["both", "blue"]
  tags: prod_site

- name: Deploy green container
  ansible.builtin.include_tasks: run-green.yml
  when:
    - not (force_fallback | default(false))
    - latest_prod_site_tag is defined
    - latest_prod_site_tag | length > 0
    - prod_site_target in ["both", "green"]
  tags: prod_site

#####################################################################
# Step 7: Cleanup fallback artifacts
#####################################################################
- name: Cleanup fallback for blue
  ansible.builtin.include_tasks: cleanup-blue.yml
  when:
    - not (force_fallback | default(false))
    - latest_prod_site_tag is defined
    - latest_prod_site_tag | length > 0
    - prod_site_target in ["both", "blue"]
    - not (blue_image_available | default(false)) and not (green_image_available | default(false))
  tags: fallback

- name: Cleanup fallback for green
  ansible.builtin.include_tasks: cleanup-green.yml
  when:
    - not (force_fallback | default(false))
    - latest_prod_site_tag is defined
    - latest_prod_site_tag | length > 0
    - prod_site_target in ["both", "green"]
    - not (blue_image_available | default(false)) and not (green_image_available | default(false))
  tags: fallback

#####################################################################
# Step 8: Final Docker system cleanup
#####################################################################
- name: Final Docker cleanup
  ansible.builtin.import_tasks: docker-prune.yml
  tags: [prod_site, cleanup]

#####################################################################
# Step 9: Record currently promoted green version
#####################################################################
- name: Write current green version to file
  ansible.builtin.copy:
    content: "{{ prod_site_tag }}"
    dest: /tmp/current_green_version.txt
    owner: "{{ ansible_user | default('devops') }}"
    group: "{{ ansible_user | default('devops') }}"
    mode: '0644'
  when:
    - prod_site_tag is defined
    - prod_site_target in ["green", "both"] or ('get_green_version' in ansible_run_tags)
  tags: always
