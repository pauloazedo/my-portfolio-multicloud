---
# ansible/roles/prod_site/tasks/run-blue.yml
# Deploy the PROD Blue container using the latest tagged image or fallback

#####################################################################
# Step 1: Remove existing blue container (if any)
#####################################################################
- name: Remove existing blue container if present
  community.docker.docker_container:
    name: "{{ prod_site_blue_container }}"
    state: absent
    force_kill: true
  register: blue_cleanup
  ignore_errors: true

- name: Log blue container cleanup result
  ansible.builtin.debug:
    msg: "Removed existing blue container: {{ blue_cleanup.changed }}"

#####################################################################
# Step 2: Run blue container with versioned image
#####################################################################
- name: Run blue container with versioned image ({{ latest_prod_site_tag }})
  community.docker.docker_container:
    name: "{{ prod_site_blue_container }}"
    image: "{{ prod_site_blue_image }}"
    restart_policy: always
    published_ports:
      - "{{ prod_site_blue_port }}:3000"
    recreate: true
    state: started
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s
  when: blue_image_available | bool
  tags:
    - prod_site
    - deploy

- name: Log skipping blue deploy – image not available
  ansible.builtin.debug:
    msg: "Blue image not available — fallback container will be used."
  when: not blue_image_available | default(false) | bool
  tags:
    - prod_site
    - fallback

#####################################################################
# Step 3: Run blue container with fallback image (if needed)
#####################################################################
- name: Run blue container with fallback image
  community.docker.docker_container:
    name: "{{ prod_site_blue_container }}"
    image: "{{ prod_site_waiting_image }}"
    restart_policy: always
    published_ports:
      - "{{ prod_site_blue_port }}:3000"
    recreate: true
    state: started
    env: "{{ prod_site_blue_env }}"
  when: not blue_image_available | default(false) | bool
  tags:
    - prod_site
    - fallback
