---
# roles/nginx/tasks/certbot-uat.yml
# Generate Let's Encrypt certs and update NGINX configs for UAT

- name: Define Certbot domain sets for UAT
  ansible.builtin.set_fact:
    nginx_certbot_domains:
      - domains: ["{{ jenkins_fqdn }}"]
        template: "jenkins-https.conf.j2"
        filename: "jenkins.conf"
        group: "uat"
      - domains: ["{{ uat_fqdn }}"]
        template: "uat-https.conf.j2"
        filename: "uat.conf"
        group: "uat"
  tags: [certbot, certbot_uat]

- name: Filter UAT domains for this host
  ansible.builtin.set_fact:
    certbot_domains_for_host: >-
      {{ nginx_certbot_domains | selectattr('group', 'in', group_names) | list }}
  tags: [certbot, certbot_uat]

- name: Gather SAN info from current UAT certs
  ansible.builtin.shell: |
    set -o pipefail
    openssl x509 -in /etc/letsencrypt/live/{{ item.domains[0] }}/cert.pem -noout -text |
    awk '/Subject Alternative Name/{getline; gsub("DNS:",""); gsub(", ","\n"); print}'
  args:
    executable: /bin/bash
  register: certbot_san_check
  changed_when: false
  failed_when: false
  loop: "{{ certbot_domains_for_host }}"
  loop_control:
    label: "{{ item.domains[0] }}"
  tags: [certbot, certbot_uat]

- name: Init certbot_final_domains (UAT)
  ansible.builtin.set_fact:
    certbot_final_domains: []
  tags: [certbot, certbot_uat]

- name: Append UAT certs to renewal list
  ansible.builtin.set_fact:
    certbot_final_domains: "{{ certbot_final_domains + [item.0] }}"
  when: >
    item.1.rc != 0 or
    (
      item.0.domains | reject('in', item.1.stdout | default('')) | list | length > 0
    )
  loop: "{{ certbot_domains_for_host | zip(certbot_san_check.results) | list }}"
  loop_control:
    label: "{{ item.0.domains[0] }}"
  tags: [certbot, certbot_uat]

- name: Generate or renew UAT certs via Certbot
  ansible.builtin.command:
    cmd: >
      certbot certonly --nginx
      {% for d in item.domains %}-d {{ d }} {% endfor %}
      --non-interactive --agree-tos
      -m paulo@pauloazedo.dev --redirect --expand
  register: certbot_result
  changed_when: certbot_result.rc == 0
  failed_when: certbot_result.rc != 0
  loop: "{{ certbot_final_domains }}"
  loop_control:
    label: "{{ item.domains[0] }}"
  tags: [certbot, certbot_uat]

- name: Deploy HTTPS NGINX config for UAT
  ansible.builtin.template:
    src: "{{ item.template }}"
    dest: "/etc/nginx/conf.d/{{ item.filename }}"
    mode: '0644'
  loop: "{{ certbot_domains_for_host }}"
  tags: [certbot_uat, nginx_reload_only]

- name: Reload NGINX service after UAT cert
  ansible.builtin.service:
    name: nginx
    state: reloaded
  tags: [certbot_uat, nginx_reload_only]

- name: Notify Slack about UAT certs
  ansible.builtin.shell: >
    bash /home/devops/slack-certbot-alert.sh {{ slack_cert_renewal_webhook }} {{ item.item.domains[0] }}
  args:
    executable: /bin/bash
  when: item.rc == 0
  changed_when: false
  loop: "{{ certbot_result.results | default([]) }}"
  tags: [certbot, certbot_uat]
