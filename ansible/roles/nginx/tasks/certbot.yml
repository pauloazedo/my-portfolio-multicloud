---
# Generate Let's Encrypt certs and update NGINX configs per environment

# Step 1: Define domains and templates per environment
- name: Define domains and templates per environment
  ansible.builtin.set_fact:
    nginx_certbot_domains:
      - domains: ["{{ jenkins_fqdn }}"]
        template: "jenkins-https.conf.j2"
        filename: "jenkins.conf"
        group: "uat"
      - domains: ["{{ uat_fqdn }}"]
        template: "uat-https.conf.j2"
        filename: "uat.conf"
        group: "uat"
      - domains: "{{ [prod_fqdn] + ([prod_fqdn] if cloud_provider == default_provider else []) }}"
        template: "prod-https-bluegreen.conf.j2"
        filename: "prod.conf"
        group: "prod"

# Step 2: Filter domains for the current host
- name: Filter domains for this host based on group
  ansible.builtin.set_fact:
    certbot_domains_for_host: "{{ nginx_certbot_domains | selectattr('group', 'in', group_names) | list }}"

# Step 3: Build full list of Certbot paths to delete (if cleanup is forced)
- name: Build list of Certbot paths to delete
  ansible.builtin.set_fact:
    certbot_paths_to_cleanup: >-
      {{
        certbot_domains_for_host
        | map(attribute='domains')
        | flatten
        | map('regex_replace', '^(.*)$', ['live/\\1', 'archive/\\1', 'renewal/\\1.conf'])
        | flatten
        | list
      }}
  when: certbot_force_clean | default(false)

# Step 4: Clean up previous Certbot state (optional safety)
- name: Remove previous Certbot state (if forced)
  ansible.builtin.file:
    path: "/etc/letsencrypt/{{ item }}"
    state: absent
  loop: "{{ certbot_paths_to_cleanup }}"
  when: certbot_force_clean | default(false)
  tags: certbot

# Step 5: Generate HTTPS certificates (SAN support)
- name: Generate HTTPS certificates with Certbot
  ansible.builtin.command:
    cmd: >
      certbot certonly --nginx
      {% for d in item.domains %}-d {{ d }} {% endfor %}
      --non-interactive --agree-tos
      -m paulo@pauloazedo.dev --redirect
    creates: "/etc/letsencrypt/live/{{ item.domains[0] }}/fullchain.pem"
  register: certbot_result
  changed_when: certbot_result.rc == 0
  failed_when: certbot_result.rc != 0
  loop: "{{ certbot_domains_for_host }}"
  tags: certbot

# Step 6: Replace NGINX config with HTTPS version
- name: Replace NGINX config with HTTPS version
  ansible.builtin.template:
    src: "{{ item.template }}"
    dest: "/etc/nginx/conf.d/{{ item.filename }}"
    mode: '0644'
  loop: "{{ certbot_domains_for_host }}"
  tags: certbot

# Step 7: Reload NGINX to apply new configuration
- name: Reload NGINX
  ansible.builtin.service:
    name: nginx
    state: reloaded
  tags: certbot

# Step 8: Send Slack alert for renewed certificates
- name: Send Slack alert for renewed certificates
  ansible.builtin.shell: >
    bash /home/devops/slack-certbot-alert.sh {{ slack_cert_renewal_webhook }} {{ item.item.domains[0] }}
  args:
    executable: /bin/bash
  when: item.rc == 0
  changed_when: false
  loop: "{{ certbot_result.results }}"
  tags: certbot
