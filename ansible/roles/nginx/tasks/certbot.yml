---
# Generate Let's Encrypt certs and update NGINX configs per environment

# Step 1: Define domains and templates per environment
- name: Define domains and templates per environment
  ansible.builtin.set_fact:
    nginx_certbot_domains:
      - domain: "jenkins.pauloazedo.us"
        template: "jenkins-https.conf.j2"
        filename: "jenkins.conf"
        group: "uat"
      - domain: "uat.pauloazedo.us"
        template: "uat-https.conf.j2"
        filename: "uat.conf"
        group: "uat"
      - domain: "prod.pauloazedo.us"
        template: "prod-https.conf.j2"
        filename: "prod.conf"
        group: "prod"

# Step 2:Extract domains relevant to this host (based on group membership)
- name: Extract domains for this host only
  ansible.builtin.set_fact:
    certbot_domains_for_host: >-
      {{
        nginx_certbot_domains
        | selectattr('group', 'in', group_names)
        | map(attribute='domain')
        | list
      }}

# Step 3: Build full list of Certbot paths to delete (if force cleanup is enabled)
- name: Build full list of Certbot paths to delete
  ansible.builtin.set_fact:
    certbot_paths_to_cleanup: >-
      {{
        (certbot_domains_for_host | map('regex_replace', '^(.*)$', 'live/\\1') | list)
        + (certbot_domains_for_host | map('regex_replace', '^(.*)$', 'archive/\\1') | list)
        + (certbot_domains_for_host | map('regex_replace', '^(.*)$', 'renewal/\\1.conf') | list)
      }}
  when: certbot_force_clean | default(false) | bool

# Step 4: Remove previous Certbot state from filesystem
- name: Clean up previous Certbot state (optional safety for retrying)
  ansible.builtin.file:
    path: "/etc/letsencrypt/{{ item }}"
    state: absent
  loop: "{{ certbot_paths_to_cleanup }}"
  when: certbot_force_clean | default(false) | bool
  tags: certbot

# Step 5: Generate HTTPS certificates using Certbot for each domain (on matching hosts)
- name: Generate HTTPS certs with Certbot
  ansible.builtin.command:
    cmd: >
      certbot certonly --nginx -d {{ item.domain }}
      --non-interactive --agree-tos
      -m pauloazedo@pauloazedo.us --redirect
  register: certbot_result
  changed_when: certbot_result.rc == 0
  failed_when: certbot_result.rc != 0
  loop: "{{ nginx_certbot_domains }}"
  when: inventory_hostname in groups[item.group]
  tags: certbot

# Step 6: Replace HTTP config with HTTPS config (for domains on this host)
- name: Replace NGINX config with HTTPS version
  ansible.builtin.template:
    src: "{{ item.template }}"
    dest: "/etc/nginx/conf.d/{{ item.filename }}"
    mode: '0644'
  loop: "{{ nginx_certbot_domains }}"
  when: inventory_hostname in groups[item.group]
  tags: certbot

# Step 7: Reload NGINX to apply new HTTPS config
- name: Reload NGINX
  ansible.builtin.service:
    name: nginx
    state: reloaded
  tags: certbot
