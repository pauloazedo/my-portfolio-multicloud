// Jenkinsfile.uat

// Run only for Git tag refs (e.g., refs/tags/v0.0.7)
if (!env.GIT_BRANCH?.startsWith("refs/tags/")) {
  echo "‚è≠Ô∏è Skipping build: not a tag (GIT_BRANCH=${env.GIT_BRANCH})"
  return
}

pipeline {
  agent any

  environment {
    ANSIBLE_INVENTORY   = 'ansible/inventory/oci.ini'
    OCIR_REPO           = 'iad.ocir.io/idtijq8cx4jl/uat-site'
    SSH_KEY_PATH        = '/var/jenkins_home/.ssh/id_rsa'
    ANSIBLE_REMOTE_USER = 'devops'
    ANSIBLE_TARGET_HOST = 'oci.uat.pauloazedo.dev'
    JENKINS_MARKER      = '/var/jenkins_home/.jenkins_self_deploy'
    FRONTEND_SRC_DIR    = './my-portfolio/frontend/'
    FRONTEND_DST_DIR    = '/home/devops/frontend'
    IMAGE_TAG_FILE      = 'image_tag.txt'
    VENV_ACTIVATE       = '/home/jenkins/venv/bin/ansible-playbook'
    UAT_APP_URL         = 'https://oci.uat.pauloazedo.dev'
  }

  options {
    timestamps()
    ansiColor('xterm')
  }

  stages {

    stage('Checkout Source') {
      steps {
        checkout scm
      }
    }

    stage('Extract Tag Name') {
      steps {
        script {
          // Extract just the tag name from the full ref (e.g., refs/tags/v0.0.7 -> v0.0.7)
          def rawRef = env.GIT_BRANCH ?: ''
          def tag = rawRef.replaceFirst(/^refs\/tags\//, '').trim()
          if (!tag) {
            error("Could not determine tag name from GIT_BRANCH=${rawRef}")
          }
          env.IMAGE_TAG = tag
          writeFile file: IMAGE_TAG_FILE, text: tag
        }
      }
    }

    stage('Sync Frontend to UAT') {
      steps {
        sh '''
          set -e
          rsync -az --delete \
            -e "ssh -i ${SSH_KEY_PATH} -o StrictHostKeyChecking=accept-new" \
            ${FRONTEND_SRC_DIR} ${ANSIBLE_REMOTE_USER}@${ANSIBLE_TARGET_HOST}:${FRONTEND_DST_DIR}
        '''
      }
    }

    stage('Deploy via Ansible') {
      steps {
        withCredentials([file(credentialsId: 'ansible-vault-passfile', variable: 'VAULT_PASS_FILE')]) {
          sh '''
            set -e
            echo '[INFO] Creating Jenkins self-deployment marker'
            touch ${JENKINS_MARKER}

            export ANSIBLE_SSH_ARGS="-i ${SSH_KEY_PATH} -o StrictHostKeyChecking=accept-new"
            export ANSIBLE_REMOTE_USER=${ANSIBLE_REMOTE_USER}

            ${VENV_ACTIVATE} -i ${ANSIBLE_INVENTORY} ansible/uat.yml \
              --limit uat \
              --tags uat_site \
              --extra-vars "uat_site_custom_image=${OCIR_REPO}:${IMAGE_TAG} \
                            uat_site_image_tag=${IMAGE_TAG}" \
              --vault-password-file "${VAULT_PASS_FILE}"
          '''
        }
      }

      post {
        always {
          sh 'rm -f ${JENKINS_MARKER} || true'
        }
      }
    }
  }

  post {
    success {
      echo "‚úÖ UAT deployment completed: ${OCIR_REPO}:${env.IMAGE_TAG}"
      slackSend (
        channel: '#jenkins_notifications',
        color: 'good',
        message: """üöÄ Version `${env.IMAGE_TAG}` was published to *UAT* and is ready for user acceptance testing.
üîó <${env.BUILD_URL}|View Jenkins Build>
üåê <${env.UAT_APP_URL}|Open UAT Application>"""
      )
    }

    failure {
      echo "‚ùå Pipeline failed. Check the logs for troubleshooting."
      slackSend (
        channel: '#jenkins_notifications',
        color: 'danger',
        message: "‚ùå *UAT Pipeline FAILED* for `${env.JOB_NAME}`.\nüîó <${env.BUILD_URL}|View Jenkins Build>"
      )
    }
  }
}
