pipeline {
  agent any

  environment {
    SSH_KEY_PATH        = '/var/jenkins_home/.ssh/id_rsa'
    ANSIBLE_REMOTE_USER = 'devops'
    JENKINS_MARKER      = '/var/jenkins_home/.jenkins_self_deploy'
    FRONTEND_SRC_DIR    = './my-portfolio/frontend/'
    FRONTEND_DST_DIR    = '/home/devops/frontend'
    IMAGE_TAG_FILE      = 'image_tag.txt'
    VENV_ACTIVATE       = '/home/jenkins/venv/bin/ansible-playbook'
  }

  options {
    timestamps()
    ansiColor('xterm')
  }

  stages {

    stage('Init Environment') {
      steps {
        script {
          echo "üß≠ Using CLOUD_PROVIDER=${env.CLOUD_PROVIDER}"

          // Define cloud-specific values
          def cloudVars = [
            oci: [
              ANSIBLE_INVENTORY: 'ansible/inventory/oci.ini',
              OCIR_REPO:         'iad.ocir.io/idtijq8cx4jl/my-portfolio-site',
              ANSIBLE_TARGET_HOST: 'oci.uat.pauloazedo.dev',
              UAT_APP_URL:         'https://oci.uat.pauloazedo.dev'
            ],
            aws: [
              ANSIBLE_INVENTORY: 'ansible/inventory/aws.ini',
              OCIR_REPO:         'aws_account_id.dkr.ecr.region.amazonaws.com/uat-site', // Replace when ready
              ANSIBLE_TARGET_HOST: 'aws.uat.pauloazedo.dev',
              UAT_APP_URL:         'https://aws.uat.pauloazedo.dev'
            ]
          ]

          def selected = cloudVars[env.CLOUD_PROVIDER]
          if (!selected) {
            error "Unknown CLOUD_PROVIDER: '${env.CLOUD_PROVIDER}'"
          }

          // Inject into environment
          env.ANSIBLE_INVENTORY   = selected.ANSIBLE_INVENTORY
          env.OCIR_REPO           = selected.OCIR_REPO
          env.ANSIBLE_TARGET_HOST = selected.ANSIBLE_TARGET_HOST
          env.UAT_APP_URL         = selected.UAT_APP_URL

          echo "üì¶ Using container repo: ${env.OCIR_REPO}"
        }
      }
    }

    stage('Validate Tag Trigger') {
      steps {
        script {
          def tagName = sh(script: "git describe --tags --exact-match || true", returnStdout: true).trim()
          if (!tagName || !tagName.startsWith("v")) {
            echo "‚è≠Ô∏è Skipping build: not a valid semantic version tag (got: '${tagName}')"
            currentBuild.result = 'NOT_BUILT'
            return
          }
          env.IMAGE_TAG = tagName
          echo "üß† Pipeline triggered by tag: ${env.IMAGE_TAG} on ${env.CLOUD_PROVIDER.toUpperCase()}"
        }
      }
    }

    stage('Checkout Specific Tag') {
      steps {
        checkout([
          $class: 'GitSCM',
          branches: [[name: "refs/tags/${env.IMAGE_TAG}"]],
          userRemoteConfigs: [[
            url: 'https://github.com/pauloazedo/my-portfolio-multicloud.git',
            credentialsId: 'github-credentials'
          ]],
          doGenerateSubmoduleConfigurations: false,
          extensions: [[$class: 'CleanCheckout']],
          submoduleCfg: []
        ])
      }
    }

    stage('Sync Frontend to UAT') {
      steps {
        sh '''
          set -e
          rsync -az --delete \
            -e "ssh -i ${SSH_KEY_PATH} -o StrictHostKeyChecking=accept-new" \
            ${FRONTEND_SRC_DIR} ${ANSIBLE_REMOTE_USER}@${ANSIBLE_TARGET_HOST}:${FRONTEND_DST_DIR}
        '''
      }
    }

    stage('Deploy via Ansible') {
      steps {
        withCredentials([file(credentialsId: 'ansible-vault-passfile', variable: 'VAULT_PASS_FILE')]) {
          sh '''
            set -e
            echo '[INFO] Creating Jenkins self-deployment marker'
            touch ${JENKINS_MARKER}

            export ANSIBLE_SSH_ARGS="-i ${SSH_KEY_PATH} -o StrictHostKeyChecking=accept-new"
            export ANSIBLE_REMOTE_USER=${ANSIBLE_REMOTE_USER}

            ${VENV_ACTIVATE} -i ${ANSIBLE_INVENTORY} ansible/uat.yml \
              --limit uat \
              --tags uat_site \
              --extra-vars "uat_site_custom_image=${OCIR_REPO}:${IMAGE_TAG} \
                            uat_site_image_tag=${IMAGE_TAG}" \
              --vault-password-file "${VAULT_PASS_FILE}"
          '''
        }
      }

      post {
        always {
          sh 'rm -f ${JENKINS_MARKER} || true'
        }
      }
    }
  }

  post {
    success {
      script {
        def repo = env.OCIR_REPO ?: 'unknown'
        echo "‚úÖ UAT deployment completed: ${repo}:${env.IMAGE_TAG}"
        slackSend (
          channel: '#jenkins_notifications',
          color: 'good',
          message: """üöÄ Version `${env.IMAGE_TAG}` was published to *UAT (${env.CLOUD_PROVIDER.toUpperCase()})* and is ready for user acceptance testing.
üîó <${env.BUILD_URL}|View Jenkins Build>
üåê <${env.UAT_APP_URL}|Open UAT Application>"""
        )
      }
    }

    failure {
      slackSend (
        channel: '#jenkins_notifications',
        color: 'danger',
        message: "‚ùå *UAT Pipeline FAILED* for `${env.JOB_NAME}` on ${env.CLOUD_PROVIDER.toUpperCase()}.\nüîó <${env.BUILD_URL}|View Jenkins Build>"
      )
    }
  }
}