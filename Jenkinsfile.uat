pipeline {
  agent any

  environment {
    DEPLOY_ENV = "uat"
    DEPLOY_TAG = ""
  }

  stages {
    stage('Checkout uat branch') {
      steps {
        git branch: 'uat',
            url: 'https://github.com/pauloazedo/my-portfolio-multicloud.git'
      }
    }

    stage('Generate Image Tag') {
      steps {
        script {
          def tag = sh(script: 'git describe --tags --abbrev=0 || true', returnStdout: true).trim()
          if (!tag) {
            tag = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
          }
          DEPLOY_TAG = tag
          writeFile file: 'image-tag.txt', text: tag
        }
      }
    }

    stage('Sync Frontend to UAT') {
      steps {
        sh '''
          set -e
          rsync -az --delete -e "ssh -i /var/jenkins_home/.ssh/id_rsa -o StrictHostKeyChecking=accept-new" ./my-portfolio/frontend/ devops@oci.uat.pauloazedo.dev:/home/devops/frontend
        '''
      }
    }

    stage('Run Ansible Deployment') {
      environment {
        ANSIBLE_REMOTE_USER = "devops"
        ANSIBLE_SSH_ARGS = "-i /var/jenkins_home/.ssh/id_rsa -o StrictHostKeyChecking=accept-new"
      }
      steps {
        withCredentials([file(credentialsId: 'ansible-vault-pass', variable: 'VAULT_PASS_FILE')]) {
          sh '''
            set -e
            echo "[INFO] Creating Jenkins self-deployment marker"
            touch /var/jenkins_home/.jenkins_self_deploy

            /home/jenkins/venv/bin/ansible-playbook -i ansible/inventory/oci.ini \
              ansible/uat.yml \
              --limit uat \
              --tags uat_site \
              --extra-vars "uat_site_custom_image=iad.ocir.io/idtijq8cx4jl/uat-site:${DEPLOY_TAG} uat_site_image_tag=${DEPLOY_TAG}" \
              --vault-password-file "$VAULT_PASS_FILE"
          '''
        }
      }
      post {
        always {
          sh 'rm -f /var/jenkins_home/.jenkins_self_deploy || true'
        }
        success {
          echo "‚úÖ UAT deployment completed: iad.ocir.io/idtijq8cx4jl/uat-site:${DEPLOY_TAG}"
          sendSlackNotification("üöÄ Version ${DEPLOY_TAG} published on *UAT* environment and is ready for testing.")
        }
        failure {
          echo "‚ùå Pipeline failed. Check the logs for troubleshooting."
          sendSlackNotification("‚ùå Jenkins UAT pipeline failed for my-portfolio-uat-deploy.")
        }
      }
    }
  }
}

def sendSlackNotification(String message) {
  withCredentials([string(credentialsId: 'slack-webhook-jenkins', variable: 'SLACK_URL')]) {
    writeFile file: 'slack_payload.json', text: """{ "text": "${message}" }"""
    sh '''
      set -e
      curl -X POST -H "Content-type: application/json" \
        --data @slack_payload.json \
        "$SLACK_URL"
    '''
  }
}
